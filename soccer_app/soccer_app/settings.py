"""
Django settings for soccer_app project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import json
import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Enable the line below if need to specify the path of .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-8e(6w*cjv)vvnqm)eqm7k!=_z%a17=#rvf^%i1u&&lxk@#-@-!')

# Temporarily disable Cross Origin Opener Policy
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') != 'False'

# SECURITY WARNING: This attribute allows the hosts listed to host the django project.
# In production, only allow hosts that you want to host your project.
# In development, default already includes "locahost" and "127.0.0.1"
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',')\
    if os.environ.get('ALLOWED_HOSTS') else ['*']

# Application definition
# Make addresses trusted by crsf token
CSRF_TRUSTED_ORIGINS = json.loads(os.environ.get('TRUSTED_ORIGINS'))\
    if os.environ.get('TRUSTED_ORIGINS') else ['http://localhost']

# Prevent Django from automatically adding a slash at the end of urls
APPEND_SLASH = False

# Redirect all http requests to https requests
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'soccer'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.auth_middleware.AuthMiddleware'
]

ROOT_URLCONF = 'soccer_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'soccer_app.global_contexts.get_user',
            ],
        },
    },
]

WSGI_APPLICATION = 'soccer_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# Testing with psql container ran on amalthea
# Enable this for deployment
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.environ.get('POSTGRES_NAME', 'pg_name'),
#         'USER': os.environ.get('POSTGRES_USER', 'pg_user'),
#         'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'pg_password'),
#         'HOST': os.environ.get('POSTGRES_HOST', 'pg_host'),
#         'PORT': os.environ.get('POSTGRES_PORT', 5432),
#     }
# }

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'PST8PDT'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# Project looks for static file under "static" folder from the root directory
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/"),
]

# Automatic compression and caching for static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'